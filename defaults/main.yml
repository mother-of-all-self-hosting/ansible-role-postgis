---
# Project source code URL: https://git.osgeo.org/gitea/postgis/postgis

postgis_enabled: true

# postgis_identifier controls the identifer of this Postgis instance, which influences:
# - the default storage path
# - the names of systemd services
# - the names of various helper scripts
# - the names of temporary files
postgis_identifier: 'postgis'

postgis_base_path: "/{{ postgis_identifier }}"
postgis_data_path: "{{ postgis_base_path }}/data"
postgis_bin_path: "{{ postgis_base_path }}/bin"

postgis_uid: ''
postgis_gid: ''

postgis_connection_hostname: "{{ postgis_identifier }}"
postgis_connection_port: 5432
postgis_connection_username: "root"
postgis_connection_password: ""
postgis_db_name: "main"

postgis_default_lc_collate: C
postgis_default_lc_type: C
postgis_default_encoding: UTF8

# postgis_initdb_args controls POSTGRES_INITDB_ARGS
postgis_initdb_args: '--lc-collate {{ postgis_default_lc_collate }} --lc-ctype {{ postgis_default_lc_type }} --encoding {{ postgis_default_encoding }}'

# postgis_systemd_services_to_stop_for_maintenance_list specifies the list of systemd services to stop before vacuuming or upgrading.
# These services will be restarted after the operation completes.
postgis_systemd_services_to_stop_for_maintenance_list: []

# postgis_vacuum_default_databases_list specifies a list of databases to vacuum when running `--tags=run-postgis-vacuum`,
# unless a `postgis_vacuum_databases_list` extra argument is provided
postgis_vacuum_default_databases_list: |
  {{
    (
        ([postgis_db_name])
        +
        (postgis_managed_databases | map(attribute='name'))
    ) | unique
  }}

postgis_architecture: amd64

postgis_container_network: "{{ postgis_identifier }}"

docker_postgis_container_image_registry_prefix: "docker.io/"

# postgis_container_image_suffix controls whether we use Alpine-based images (`-alpine`) or the normal Debian-based images.
# Alpine-based Postgres images are smaller and we usually prefer them, but they don't work on ARM32 (tested on a Raspberry Pi 3 running Raspbian 10.7).
# On ARM32, `-alpine` images fail with the following error:
# > LOG:  startup process (PID 37) was terminated by signal 11: Segmentation fault
postgis_container_image_suffix: "{{ '-alpine' if postgis_architecture in ['amd64', 'arm64'] else '' }}"

postgis_container_image_v15: "{{ docker_postgis_container_image_registry_prefix }}postgis/postgis:15-3.3{{ postgis_container_image_suffix }}"
postgis_container_image_latest: "{{ postgis_container_image_v15 }}"

# This variable is assigned at runtime. Overriding its value has no effect.
postgis_container_image_to_use: '{{ postgis_container_image_latest }}'

postgis_container_image_force_pull: "{{ postgis_container_image_to_use.endswith(':latest') }}"

# A list of extra arguments to pass to the container
postgis_container_extra_arguments: []

# A list of extra arguments to pass to the postgis process
# e.g. "-c 'max_connections=200'"
postgis_process_extra_arguments: []

# Controls whether the Postgres container exposes a port (tcp/5432 in the
# container) that can be used to access the database from outside the container (e.g. with psql)
#
# psql postgresql://username:password@localhost:<port>/database_name
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:5432"), or empty string to not expose.
postgis_container_postgres_bind_port: ""

postgis_container_shm_size: "256m"

postgis_systemd_required_services_list: ['docker.service']

# A list of databases (and their credentials) that this role will create and manage on the server.
#
# `postgis_managed_databases_auto` is managed by the playbook.
# Your own definitions should go into `postgis_managed_databases_additional`
# See `postgis_managed_databases_additional` for the correct syntax.
postgis_managed_databases: "{{ postgis_managed_databases_auto + postgis_managed_databases_additional }}"

# Additional/managed database definitions managed by the playbook.
# To add your own, use `postgis_managed_databases_additional`
postgis_managed_databases_auto: []

# Your own additional/managed database definitions.
#
# postgis_managed_databases_additional:
#   - name: some_database
#     username: some_username
#     password: some_password
#   - name: another_database
#     username: another_username
#     password: another_password
postgis_managed_databases_additional: []

# The number of seconds to wait after starting Postgres systemd service
# and before trying to run queries for initializing managed databases/users against it.
#
# For most (subsequent) runs, Postgres would already be running, so no waiting will be happening at all.
#
# On ARM, we wait some more. ARM32 devices are especially known for being slow.
# ARM64 likely don't need such a long delay, but it doesn't hurt too much having it.
postgis_managed_databases_postgres_start_wait_timeout_seconds: "{{ 45 if postgis_architecture in ['arm32', 'arm64'] else 15 }}"
