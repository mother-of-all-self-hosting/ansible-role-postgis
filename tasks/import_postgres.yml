---

# Pre-checks

- name: Fail if playbook called incorrectly
  ansible.builtin.fail:
    msg: "The `server_path_postgres_dump` variable needs to be provided to this playbook, via --extra-vars"
  when: "server_path_postgres_dump is not defined or server_path_postgres_dump.startswith('<')"

- name: Check if the provided Postgres dump file exists
  ansible.builtin.stat:
    path: "{{ server_path_postgres_dump }}"
  register: result_server_path_postgres_dump_stat

- name: Fail if provided Postgres dump file doesn't exists
  ansible.builtin.fail:
    msg: "File cannot be found on the server at {{ server_path_postgres_dump }}"
  when: "not result_server_path_postgres_dump_stat.stat.exists"


# Defaults

- name: Set postgres_start_wait_time, if not provided
  ansible.builtin.set_fact:
    postgres_start_wait_time: 15
  when: "postgres_start_wait_time | default('') == ''"

- name: Set postgres_import_wait_time, if not provided
  ansible.builtin.set_fact:
    postgres_import_wait_time: "{{ 7 * 86400 }}"
  when: "postgres_import_wait_time | default('') == ''"

# By default, we connect and import into the main (`default`) database.
# Single-database dumps may wish to import into a specific database instead by passing an `postgres_default_import_database` extra-vars variable.
- name: Set postgres_default_import_database, if not provided
  ansible.builtin.set_fact:
    postgres_default_import_database: "{{ postgis_db_name }}"
  when: "postgres_default_import_database | default('') == ''"

# Actual import work

- name: Ensure Postgres is started
  ansible.builtin.service:
    name: "{{ postgis_identifier }}"
    state: started
    daemon_reload: true
  register: postgis_ensure_started_result

- when: "postgis_ensure_started_result.changed | bool"
  name: Wait a bit, so that Postgres can start
  ansible.builtin.wait_for:
    timeout: "{{ postgres_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

- ansible.builtin.import_tasks: tasks/detect_existing_postgres_version.yml

- name: Abort, if no existing Postgres version detected
  ansible.builtin.fail:
    msg: "Could not find existing Postgres installation"
  when: "not postgis_detected_existing | bool"

# Starting the database container had automatically created the default
# role (`postgis_connection_username`) and database (`postgis_db_name`).
# The dump most likely contains those same entries and would try to re-create them, leading to errors.
# We need to skip over those lines.
- name: Generate Postgres database import command
  ansible.builtin.set_fact:
    postgis_import_command: >-
      {{ devture_systemd_docker_base_host_command_docker }} run --rm --name {{ postgis_identifier }}-import
      --log-driver=none
      --user={{ postgis_uid }}:{{ postgis_gid }}
      --cap-drop=ALL
      --network={{ postgis_container_network }}
      --env-file={{ postgis_base_path }}/env-postgres-psql
      --mount type=bind,src={{ server_path_postgres_dump }},dst=/{{ server_path_postgres_dump | basename }},ro
      --entrypoint=/bin/sh
      {{ postgis_container_image_latest }}
      -c "cat /{{ server_path_postgres_dump | basename }} |
      {{ 'gunzip |' if server_path_postgres_dump.endswith('.gz') else '' }}
      grep -vE '{{ postgis_import_roles_ignore_regex }}' |
      grep -vE '{{ postgis_import_databases_ignore_regex }}' |
      psql -v ON_ERROR_STOP=1 -h {{ postgis_identifier }} --dbname={{ postgres_default_import_database }}"
  tags:
    - skip_ansible_lint

# This is a hack.
# See: https://ansibledaily.com/print-to-standard-output-without-escaping/
#
# We want to run `debug: msg=".."`, but that dumps it as JSON and escapes double quotes within it,
# which ruins the command (`postgis_import_command`)
- name: Note about Postgres importing alternative
  ansible.builtin.set_fact:
    dummy: true
  with_items:
    - >-
        Importing Postgres database using the following command: `{{ postgis_import_command }}`.
        If this crashes, you can stop Postgres (`systemctl stop {{ postgis_identifier }}`),
        delete its existing data (`rm -rf {{ postgis_data_path }}/*`), start it again (`systemctl start {{ postgis_identifier }}`)
        and manually run the above import command directly on the server.

- name: Perform Postgres database import
  ansible.builtin.command:
    cmd: "{{ postgis_import_command }}"
  async: "{{ postgres_import_wait_time }}"
  poll: 10
  register: postgis_import_postgres_command_result
  failed_when: not postgis_import_postgres_command_result.finished or postgis_import_postgres_command_result.rc != 0
  changed_when: postgis_import_postgres_command_result.finished and postgis_import_postgres_command_result.rc == 0

- when: "postgis_ensure_started_result.changed | bool"
  name: Ensure Postgres is stopped (if it previously was)
  ansible.builtin.service:
    name: "{{ postgis_identifier }}"
    state: stopped
